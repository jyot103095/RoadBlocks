{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/block.js","webpack:///./lib/game.js","webpack:///./lib/gameView.js","webpack:///./lib/lengthBall.js","webpack:///./lib/roadBlocks.js","webpack:///./lib/snake.js","webpack:///./lib/tail_element.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACvHA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACnBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACrBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,CAAC;;;;;;;;;;;;;;;ACdD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,iBAAiB;AACpC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACnFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/roadBlocks.js\");\n","class Block {\n  constructor(positionX) {\n    this.positionX = positionX;\n    this.value = 5;\n    this.positionY = -92;\n    this.width = 90;\n    this.radius = 10;\n    // this.move = this.move.bind(this);\n  }\n\n  // move() {\n  //   this.positionY += this.velocityY;\n  // }\n\n  draw(ctx, velocity) {\n    this.positionY += velocity;\n\n    ctx.fillStyle = \"#00ffff\";\n    ctx.beginPath();\n    ctx.moveTo(this.positionX + this.radius, this.positionY);\n    ctx.lineTo(this.positionX + this.width - this.radius, this.positionY);\n    ctx.quadraticCurveTo(this.positionX + this.width, this.positionY, this.positionX + this.width, this.positionY + this.radius);\n    ctx.lineTo(this.positionX + this.width, this.positionY + this.width - this.radius);\n    ctx.quadraticCurveTo(this.positionX + this.width, this.positionY + this.width, this.positionX + this.width - this.radius, this.positionY + this.width);\n    ctx.lineTo(this.positionX + this.radius, this.positionY + this.width);\n    ctx.quadraticCurveTo(this.positionX, this.positionY + this.width, this.positionX, this.positionY + this.width - this.radius);\n    ctx.lineTo(this.positionX, this.positionY + this.radius);\n    ctx.quadraticCurveTo(this.positionX, this.positionY, this.positionX + this.radius, this.positionY);\n    ctx.closePath();\n    ctx.fill();\n  }\n}\n\nexport default Block;\n","import Snake from './snake';\nimport LengthBall from './lengthBall';\nimport Block from './block';\n\nclass Game {\n  constructor() {\n    this.snake = new Snake();\n    this.inCollision = false;\n    this.collidingObj = null;\n    this.velocity = 2;\n    this.blocks = [ new Block(0, this.velocity), new Block(270, this.velocity), new Block(360, this.velocity) ];\n  }\n\n  moveSnake(e, canvas) {\n    let relativeX = e.clientX - canvas.offsetLeft;\n    let newPositionX = this.getHorizontalPosition(relativeX);\n\n    if(newPositionX >= 10 && newPositionX <= 440) {\n      this.snake.velocityX = 0;\n      this.snake.positionX = newPositionX;\n    } else if (newPositionX < 15) {\n      this.snake.velocityX = -1;\n    } else {\n      this.snake.velocityX = 1;\n    }\n  }\n\n  calculateDistance(object) {\n    let snakePosX = this.snake.positionX;\n    let snakePosY = this.snake.positionY;\n    let objPosX = object.positionX;\n    let objPosY = object.positionY;\n    return Math.sqrt((snakePosX - objPosX)**2 + (snakePosY - objPosY)**2);\n  }\n\n  collisionDetection() {\n    if (this.inCollision) {\n      let stillColliding = false;\n      this.blocks.forEach(block => {\n        if (this.snake.positionX >= block.positionX && this.snake.positionX <= (block.positionX + block.width)) {\n          stillColliding = true;\n        }\n      });\n      this.inCollision = stillColliding;\n    }\n    for (let i = 0; i < this.blocks.length; i++) {\n      let obj = this.blocks[i];\n      if (obj instanceof LengthBall) {\n        let distance = this.calculateDistance(obj);\n        if (distance < this.snake.radius + obj.radius) {\n          this.snake.addLength(obj.value);\n          this.blocks.splice(i, 1);\n        }\n      } else if (obj instanceof Block) {\n        if ((10 + obj.width + obj.positionY) === this.snake.positionY) {\n          if (this.snake.positionX >= obj.positionX && this.snake.positionX <= (obj.positionX + obj.width)) {\n            this.handleBlockCollision(obj, i);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  handleBlockCollision(obj, i) {\n    obj.value--;\n    this.snake.removeHead();\n    if (obj.value === 0) {\n      this.blocks.splice(i, 1);\n      this.inCollision = false;\n    } else {\n      this.inCollision = true;\n    }\n    this.snake.velocityY = -2;\n  }\n\n  getHorizontalPosition(position) {\n    let newPosition = position;\n    if (newPosition < this.snake.positionX) {\n      let blocks = this.blocks.filter(block => block.positionX < this.snake.positionX);\n      let endBlock = blocks.reduce((end, block) => block.positionX > end.positionX ? block : end);\n      if ((this.snake.positionY - 10) < (endBlock.positionY + endBlock.width) && (this.snake.positionY + 10) > endBlock.positionY) {\n        if (newPosition <= endBlock.positionX + endBlock.width) {\n          newPosition = endBlock.positionX + endBlock.width + 10;\n        }\n      }\n    } else if (newPosition > this.snake.positionX) {\n      let blocks = this.blocks.filter(block => block.positionX > this.snake.positionX);\n      let endBlock = blocks.reduce((end, block) => block.positionX < end.positionX ? block : end);\n      if ((this.snake.positionY - 10) < (endBlock.positionY + endBlock.width) && (this.snake.positionY + 10) > endBlock.positionY) {\n        if (newPosition >= endBlock.positionX) {\n          newPosition = endBlock.positionX - 10;\n        }\n      }\n    }\n\n    return newPosition;\n  }\n\n\n  draw(ctx) {\n    if (this.inCollision) {\n      this.velocity = 0;\n    } else {\n      this.velocity = 4;\n    }\n\n    ctx.clearRect(0, 0, 450, 600);\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, 450, 600);\n\n    this.snake.draw(ctx);\n    this.blocks.forEach(obj => obj.draw(ctx, this.velocity));\n\n    this.collisionDetection();\n    this.snake.move();\n  }\n}\n\nexport default Game;\n","class GameView {\n  constructor(game, ctx) {\n    this.game = game;\n    this.ctx = ctx;\n  }\n\n  start() {\n    this.lastTime = 0;\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  animate(time) {\n    const timeDelta = time - this.lastTime;\n    this.game.draw(this.ctx);\n    this.lastTime = time;\n    requestAnimationFrame(this.animate.bind(this));\n  }\n}\n\nexport default GameView;\n","class LengthBall {\n  constructor(positionX) {\n    this.positionX = positionX;\n    this.positionY = -5;\n    this.radius = 10;\n    this.value = 5;\n    // this.velocityY = velocityY;\n  }\n\n  draw(ctx, velocity) {\n    this.positionY += velocity;\n    ctx.fillStyle = \"blue\";\n\n    ctx.beginPath();\n    ctx.arc(\n      this.positionX, this.positionY, this.radius, 0, 2 * Math.PI, true\n    );\n    ctx.fill();\n  }\n}\n\nexport default LengthBall;\n","import Game from './game';\nimport GameView from './gameView';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvasEl = document.getElementsByTagName(\"canvas\")[0];\n  canvasEl.width = 450;\n  canvasEl.height = 600;\n  const ctx = canvasEl.getContext(\"2d\");\n  const game = new Game();\n  const gameView = new GameView(game, ctx);\n  document.addEventListener(\"mousemove\", (e) => {\n    game.moveSnake.call(game, e, canvasEl);\n  });\n  gameView.start();\n});\n","import TailElement from './tail_element';\n\nclass Snake {\n  constructor() {\n    this.length = 10;\n    this.positionX = 225;\n    this.positionY = 400;\n    this.radius = 10;\n    this.velocityX = 0;\n    this.velocityY = 0;\n    this.tail = this.generateTail();\n    // this.velocityY = -1;\n    // this.moveTail = this.moveTail.bind(this);\n    this.generateTail.bind(this);\n  }\n\n  generateTail() {\n    const tailElements = [];\n\n    for (let i = 0; i < this.length; i++) {\n      let positionY = this.positionY + (i * 20);\n      tailElements.push(new TailElement(this.positionX, positionY));\n    }\n\n    return tailElements;\n  }\n\n  addLength(value) {\n    this.length += value;\n    this.tail = this.generateTail();\n  }\n\n  removeHead() {\n    this.length--;\n    this.tail.shift();\n    if (this.tail[0]) {\n      this.positionY = this.tail[0].positionY;\n    }\n  }\n\n  updatePosition() {\n    if (this.positionX + this.velocityX >= 10 && this.positionX + this.velocityX <= 440) {\n      this.positionX += this.velocityX;\n    }\n\n    if (this.positionY > 400) {\n      this.positionY += this.velocityY;\n    } else {\n      this.velocityY = 0;\n    }\n  }\n\n  move() {\n    this.updatePosition();\n    let head = this.tail[0];\n    head.positionX = this.positionX;\n    head.positionY = this.positionY;\n\n    for (let i = 1; i < this.length; i++) {\n      let tailEl = this.tail[i];\n      let prevEl = this.tail[i - 1];\n      let distance = Math.sqrt((tailEl.positionX - prevEl.positionX)**2);\n      let velocityX = Math.abs(tailEl.positionX - prevEl.positionX) / 2;\n\n      if(distance < velocityX) {\n        tailEl.positionX = prevEl.positionX;\n      }\n      else if(tailEl.positionX > prevEl.positionX && (tailEl.positionX - velocityX) >= 10) {\n        tailEl.positionX -= velocityX;\n      }\n      else if(tailEl.positionX < prevEl.positionX && (tailEl.positionX - velocityX) <= 440) {\n        tailEl.positionX += velocityX;\n      }\n\n      tailEl.positionY += this.velocityY;\n    }\n  }\n\n  draw(ctx) {\n    this.tail.forEach(el => el.draw(ctx));\n  }\n}\n\nexport default Snake;\n","class TailElement {\n  constructor(positionX, positionY) {\n    this.positionX = positionX;\n    this.positionY = positionY;\n    this.prevYPos = null;\n    this.radius = 10;\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = \"#FF0000\";\n\n    ctx.beginPath();\n    ctx.arc(\n      this.positionX, this.positionY, this.radius, 0, 2 * Math.PI, true\n    );\n    ctx.fill();\n  }\n}\n\nexport default TailElement;\n"],"sourceRoot":""}