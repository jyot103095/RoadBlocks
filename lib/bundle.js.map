{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/block.js","webpack:///./lib/game.js","webpack:///./lib/gameView.js","webpack:///./lib/lengthPoints.js","webpack:///./lib/roadBlocks.js","webpack:///./lib/snake.js","webpack:///./lib/tail_element.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,OAAO,IAAI,OAAO,IAAI,OAAO;AACjD,KAAK;AACL;AACA,oBAAoB,OAAO,IAAI,OAAO,IAAI,OAAO;AACjD,KAAK;AACL;AACA;AACA,oBAAoB,OAAO,IAAI,OAAO,IAAI,OAAO;AACjD,KAAK;AACL;AACA;AACA;AACA,oBAAoB,OAAO,IAAI,OAAO,IAAI,OAAO;AACjD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B;AACA;;AAEA;;;;;;;;;;;;;;;;;ACrDA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,8C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,wBAAwB;AAC3C;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,O;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AClOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;AClDA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B;AACA;;AAEA;;;;;;;;;;;;;;;;ACxBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,CAAC;;;;;;;;;;;;;;;ACxBD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,iBAAiB;AACpC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACpGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/roadBlocks.js\");\n","class Block {\n  constructor(positionX, value) {\n    this.positionX = positionX;\n    this.value = value;\n    this.positionY = -92;\n    this.width = 90;\n    this.radius = 10;\n  }\n\n  getColor() {\n    let rgb = [255, 0, 0];\n    if (this.value >= 45) {\n      return `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;\n    } else if (this.value >= 30) {\n      rgb[1] = (45 - this.value) * 17;\n      return `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;\n    } else if (this.value >= 15) {\n      rgb[1] = 255;\n      rgb[0] = (this.value - 15) * 17;\n      return `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;\n    } else {\n      rgb[0] = 0;\n      rgb[1] = 255;\n      rgb[2] = (15 - this.value) * 17;\n      return `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;\n    }\n  }\n\n  draw(ctx, velocity) {\n    this.positionY += velocity;\n\n    ctx.fillStyle = this.getColor();\n    ctx.strokeStyle = \"black\";\n    ctx.beginPath();\n    ctx.moveTo(this.positionX + this.radius, this.positionY);\n    ctx.lineTo(this.positionX + this.width - this.radius, this.positionY);\n    ctx.quadraticCurveTo(this.positionX + this.width, this.positionY, this.positionX + this.width, this.positionY + this.radius);\n    ctx.lineTo(this.positionX + this.width, this.positionY + this.width - this.radius);\n    ctx.quadraticCurveTo(this.positionX + this.width, this.positionY + this.width, this.positionX + this.width - this.radius, this.positionY + this.width);\n    ctx.lineTo(this.positionX + this.radius, this.positionY + this.width);\n    ctx.quadraticCurveTo(this.positionX, this.positionY + this.width, this.positionX, this.positionY + this.width - this.radius);\n    ctx.lineTo(this.positionX, this.positionY + this.radius);\n    ctx.quadraticCurveTo(this.positionX, this.positionY, this.positionX + this.radius, this.positionY);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n    ctx.font = \"bold 20px Arial\";\n    ctx.fillStyle = \"black\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(`${this.value}`, this.positionX + (this.width / 2), this.positionY + this.radius + (this.width / 2));\n  }\n}\n\nexport default Block;\n","import Snake from './snake';\nimport LengthPoint from './lengthPoints';\nimport Block from './block';\n\nclass Game {\n  constructor() {\n    this.snake = new Snake();\n    this.inCollision = false;\n    this.collidingObj = null;\n    this.velocity = 2;\n    this.score = 0;\n    this.lengthPoints = [ new LengthPoint(45, 2), new LengthPoint(225, 5) ];\n    this.blocks = [ new Block(0, 1), new Block(90, 1), new Block(180, 1), new Block(270, 2), new Block(360, 1) ];\n  }\n\n  getHighestBlock() {\n    let highest = this.blocks[0];\n\n    for (let i = 1; i < this.blocks.length; i++) {\n      if (this.blocks[i].positionY < highest.positionY) {\n        highest = this.blocks[i];\n      }\n    }\n\n    return highest;\n  }\n\n  generateBlocks() {\n    const blockPositions = [0, 90, 180, 270, 360];\n    let numBlocks = this.getRandomNumber();\n    let positionsArr = [];\n\n    let i = 0;\n    while (i < 5) {\n      let newPosIdx = this.getRandomIndex();\n      if (!positionsArr.includes(blockPositions[newPosIdx])) {\n        positionsArr.push(blockPositions[newPosIdx]);\n        i++;\n      }\n    }\n\n    let lowBlockValue = Math.floor((Math.random() * this.snake.length) + 1);\n    let lowValueBlock = new Block(positionsArr[0], lowBlockValue);\n\n    this.blocks.push(lowValueBlock);\n\n    positionsArr.slice(1).forEach(pos => {\n      let newBlock = new Block(pos, this.getRandomBlockValue());\n      this.blocks.push(newBlock);\n    });\n  }\n\n  getRandomIndex() {\n    return Math.floor(Math.random() * 5);\n  }\n\n  getRandomBlockValue() {\n    return Math.floor((Math.random() * 50) + 1);\n  }\n\n  getRandomNumber() {\n    return Math.floor((Math.random() * 6));\n  }\n\n  generateLengthPoints() {\n    const pointPositions = [45, 135, 225, 315, 405];\n    let newPointPos = pointPositions[this.getRandomIndex()];\n    let newLengthPoint = new LengthPoint(newPointPos, this.getRandomPointValue());\n\n    this.lengthPoints.push(newLengthPoint);\n  }\n\n  getHighestPoint() {\n    let highest = this.lengthPoints[0];\n\n    for (let i = 1; i < this.lengthPoints.length; i++) {\n      if (this.lengthPoints[i].positionY < highest.positionY) {\n        highest = this.lengthPoints[i];\n      }\n    }\n\n    return highest;\n  }\n\n  getRandomPointValue() {\n   return Math.floor((Math.random() * 5) + 1); \n  }\n\n  moveSnake(e, canvas) {\n    let relativeX = e.clientX - canvas.offsetLeft;\n    if(relativeX >= 10 && relativeX <= 440) {\n      this.snake.velocityX = 0;\n      this.snake.nextPosition = relativeX;\n    } else if (relativeX < 10) {\n      this.snake.velocityX = -1;\n    } else {\n      this.snake.velocityX = 1;\n    }\n  }\n\n  calculateDistance(object) {\n    if (object instanceof LengthPoint) {\n      let dX = this.snake.tail[0].positionX - object.positionX;\n      let dY = this.snake.positionY - object.positionY;\n      return Math.sqrt((dX * dX) + (dY * dY));\n    } else {\n      let dy = this.snake.positionY - 10 - object.positionY;\n      return dy;\n    }\n  }\n\n  collisionDetection() {\n    if (this.inCollision) {\n      let stillColliding = false;\n      this.blocks.forEach(block => {\n        if (this.snake.tail[0].positionX - block.positionX >= 0 && (this.snake.tail[0].positionX - block.positionX) <= block.width) {\n          stillColliding = true;\n        }\n      });\n      this.inCollision = stillColliding;\n    }\n\n    this.checkPoints();\n    this.checkBlocks();\n  }\n\n  checkPoints() {\n    for (let i = 0; i < this.lengthPoints.length; i++) {\n      let point = this.lengthPoints[i];\n      let distance = this.calculateDistance(point);\n      if (distance < this.snake.radius + point.radius) {\n        this.snake.addLength(point.value);\n        this.lengthPoints.splice(i, 1);\n      }\n    }\n  }\n\n  checkBlocks() {\n    for (let i = 0; i < this.blocks.length; i++) {\n      let block = this.blocks[i];\n\n      if (block.positionY < 0) {\n        continue;\n      } else if (block.positionY > 700) {\n        this.blocks.splice(i, 1);\n        break;\n      } else if ((block.positionY + block.width) >= 340 && (block.positionY + block.width) <= 350) {\n        if (this.calculateDistance(block) <= (block.width + this.snake.radius)) {\n          if (this.snake.tail[0].positionX - block.positionX >= 0 && (this.snake.tail[0].positionX - block.positionX) <= block.width) {\n            this.handleBlockCollision(block, i);\n            break;\n          }\n        }\n      }\n\n    }\n  }\n\n  handleBlockCollision(obj, i) {\n    obj.value--;\n    this.score++;\n    this.snake.removeHead();\n    if (obj.value === 0) {\n      this.blocks.splice(i, 1);\n      this.inCollision = false;\n    } else {\n      this.inCollision = true;\n    }\n    this.snake.velocityY = -(this.velocity * 0.75);\n  }\n\n  over() {\n    return this.snake.length === 0;\n  }\n\n  getVelocity() {\n    if (this.score < 50) {\n      return 4;\n    } else if (this.score < 100) {\n      return 4.5;\n    } else if (this.score < 150) {\n      return 5;\n    } else if (this.score < 200) {\n      return 5.5;\n    } else {\n      return 6;\n    }\n  }\n\n  draw(ctx) {\n    let tempVelocity;\n    if (this.inCollision) {\n      tempVelocity = 0;\n    } else {\n      tempVelocity = this.velocity;\n      this.velocity = this.getVelocity();\n    }\n\n    ctx.clearRect(0, 0, 450, 700);\n\n    this.snake.draw(ctx);\n    this.blocks.forEach(block => block.draw(ctx, tempVelocity));\n    this.lengthPoints.forEach(point => point.draw(ctx, tempVelocity));\n\n    if (this.snake.length > 0) {\n      this.collisionDetection();\n      this.snake.move(this.blocks);\n    }\n\n    if (this.getHighestBlock()) {\n      let distanceBetween = 450;\n      if (this.score > 150) {\n        distanceBetween = 300;\n      }\n\n      if (this.getHighestBlock().positionY > distanceBetween) {\n        this.generateBlocks();\n      }        \n    }\n\n    if (this.getHighestPoint() && this.getHighestPoint().positionY > 270) {\n      this.generateLengthPoints();\n    }\n  }\n}\n\nexport default Game;\n","import Game from './game';\n\nclass GameView {\n  constructor(canvas, ctx) {\n    this.game = new Game();\n    this.ctx = ctx;\n    this.canvas = canvas;\n    this.animation = null;\n    this.game.draw(this.ctx);\n    this.isPaused = false;\n  }\n\n  start() {\n    this.lastTime = 0;\n    this.animation = window.requestAnimationFrame(this.animate.bind(this));\n    document.addEventListener(\"mousemove\", (e) => {\n      this.game.moveSnake.call(this.game, e, this.canvas);\n    });\n  }\n\n  pause() {\n    this.isPaused = !this.isPaused;\n    if (!this.isPaused) {\n      window.requestAnimationFrame(this.animate.bind(this));\n    }\n  }\n\n  animate(time) {\n    const timeDelta = time - this.lastTime;\n    if (this.game.over()) {\n      window.cancelAnimationFrame(this.animation);\n      this.game.draw(this.ctx);\n      // this.drawGameOver();\n      this.game = new Game();\n      return;\n    } else if (this.isPaused) {\n      window.cancelAnimationFrame(this.animation);\n      return;\n    } else {\n      this.game.draw(this.ctx);\n    }\n    this.lastTime = time;\n    window.requestAnimationFrame(this.animate.bind(this));\n  }\n\n  drawGameOver() {\n    // this.ctx.moveTo(90, )\n  }\n}\n\nexport default GameView;\n","class LengthPoint {\n  constructor(positionX, value) {\n    this.positionX = positionX;\n    this.positionY = -5;\n    this.radius = 12;\n    this.value = value;\n    // this.velocityY = velocityY;\n  }\n\n  draw(ctx, velocity) {\n    this.positionY += velocity;\n    ctx.fillStyle = \"red\";\n\n    ctx.beginPath();\n    ctx.arc(\n      this.positionX, this.positionY, this.radius, 0, 2 * Math.PI, true\n    );\n    ctx.fill();\n    ctx.font = \"bold 12px Arial\";\n    ctx.fillStyle = \"white\";\n    ctx.fillText(`${this.value}`, this.positionX, this.positionY + 5);\n  }\n}\n\nexport default LengthPoint;\n","import Game from './game';\nimport GameView from './gameView';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvasEl = document.getElementsByTagName(\"canvas\")[0];\n  canvasEl.width = 450;\n  canvasEl.height = 700;\n  const ctx = canvasEl.getContext(\"2d\");\n  const gameView = new GameView(canvasEl, ctx);\n  \n  function startGame(e) {\n    if (e.keyCode === 32) {\n      gameView.start();\n    }\n\n    document.removeEventListener(\"keypress\", startGame);\n    document.addEventListener(\"keypress\", (e) => {\n      if (e.keyCode === 32) {\n        gameView.pause();\n      }\n    });\n  }\n  \n  document.addEventListener(\"keypress\", startGame);\n});\n","import TailElement from './tail_element';\n\nclass Snake {\n  constructor() {\n    this.length = 10;\n    this.positionX = 225;\n    this.positionY = 350;\n    this.nextPosition = 225;\n    this.radius = 12;\n    this.velocityX = 0;\n    this.velocityY = 0;\n    this.tail = this.generateTail();\n    // this.velocityY = -1;\n    // this.moveTail = this.moveTail.bind(this);\n    this.generateTail.bind(this);\n  }\n\n  generateTail() {\n    const tailElements = [];\n\n    for (let i = 0; i < this.length; i++) {\n      let positionY = this.positionY + (i * 20);\n      tailElements.push(new TailElement(this.positionX, positionY));\n    }\n\n    return tailElements;\n  }\n\n  addLength(value) {\n    let positionX = this.tail[this.length - 1].positionX;\n    for (let i = 1; i <= value; i++) {\n      let positionY = this.tail[this.length - 1].positionY;\n      positionY = positionY + (i * 20);\n\n      let newTailEl = new TailElement(positionX, positionY);\n      this.tail.push(newTailEl);\n    }\n    this.length += value;\n  }\n\n  removeHead() {\n    this.length--;\n    this.tail.shift();\n    if (this.tail[0]) {\n      this.positionY = this.tail[0].positionY;\n    }\n  }\n\n  updatePosition() {\n    if (this.positionX + this.velocityX >= 10 && this.positionX + this.velocityX <= 440) {\n      this.nextPosition += this.velocityX;\n    }\n\n    if (this.positionY > 350) {\n      this.positionY += this.velocityY;\n    } else {\n      this.velocityY = 0;\n    }\n  }\n\n  move(blocks) {\n    this.updatePosition();\n    let head = this.tail[0];\n    if (head) {\n      head.updateHorizontalPosition(this.nextPosition, blocks);\n      head.positionY = this.positionY;\n    }\n\n    for (let i = 1; i < this.length; i++) {\n      let tailEl = this.tail[i];\n      let prevEl = this.tail[i - 1];\n      let distance = tailEl.positionX - prevEl.positionX;\n      let velocityX = Math.abs(tailEl.positionX - prevEl.positionX) / 4;\n\n      if (tailEl.positionX < prevEl.positionX) {\n        let newPosition = tailEl.positionX + velocityX;\n        tailEl.updateHorizontalPosition(newPosition, blocks);\n      } else if (tailEl.positionX > prevEl.positionX) {\n        let newPosition = tailEl.positionX - velocityX;\n        tailEl.updateHorizontalPosition(newPosition, blocks);\n      }\n\n\n      tailEl.positionY += this.velocityY;\n    }\n  }\n\n  draw(ctx) {\n    if (this.tail[0]) {\n      ctx.font = \"bold 14px Comic Sans MS\";\n      ctx.fontWeight = 600;\n      ctx.fillStyle = \"white\";\n      ctx.textAlign = \"center\";\n      ctx.fillText(`${this.length}`, this.tail[0].positionX, this.positionY - 20);\n    }\n\n    this.tail.forEach(el => el.draw(ctx));\n  }\n}\n\nexport default Snake;\n","class TailElement {\n  constructor(positionX, positionY) {\n    this.positionX = positionX;\n    this.positionY = positionY;\n    this.prevYPos = null;\n    this.radius = 10;\n  }\n\n  updateHorizontalPosition(position, blocks) {\n    let newPosition = this.getHorizontalPosition(position, blocks);\n\n    if (newPosition >= 10 && newPosition <= 440) {\n      this.positionX = newPosition;\n    }\n  }\n\n  getHorizontalPosition(position, blocks) {\n    let newPosition = position;\n    if (position < this.positionX) {\n      newPosition = this.checkLeft(position, blocks);\n    } else if (newPosition > this.positionX) {\n      newPosition = this.checkRight(position, blocks);\n    }\n\n    return newPosition;\n  }\n\n  checkLeft(position, blocks) {\n    let newPosition = position;\n    let filteredBlocks = blocks.filter(block => block.positionX < this.positionX);\n    if (filteredBlocks.length > 0) {\n      let endBlock = filteredBlocks.reduce((end, block) => block.positionX > end.positionX ? block : end);\n      if ((this.positionY - 10) < (endBlock.positionY + endBlock.width) && (this.positionY + 10) > endBlock.positionY) {\n        if (newPosition <= endBlock.positionX + endBlock.width) {\n          newPosition = endBlock.positionX + endBlock.width + 10;\n        }\n      }\n    }\n\n    return newPosition;\n  }\n\n  checkRight(position, blocks) {\n    let newPosition = position;\n    let filteredBlocks = blocks.filter(block => block.positionX > this.positionX);\n    if (filteredBlocks.length > 0) {\n      let endBlock = filteredBlocks.reduce((end, block) => block.positionX < end.positionX ? block : end);\n      if ((this.positionY - 10) < (endBlock.positionY + endBlock.width) && (this.positionY + 10) > endBlock.positionY) {\n        if (newPosition >= endBlock.positionX) {\n          newPosition = endBlock.positionX - 10;\n        }\n      }\n    }\n\n    return newPosition;\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = \"#FF0000\";\n\n    ctx.beginPath();\n    ctx.arc(\n      this.positionX, this.positionY, this.radius, 0, 2 * Math.PI, true\n    );\n    ctx.fill();\n  }\n}\n\nexport default TailElement;\n"],"sourceRoot":""}